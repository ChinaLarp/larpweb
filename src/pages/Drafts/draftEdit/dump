
    <input
      type="text"
      value={characterlist.charactername}
      onChange={(evt)=>{this.setState({characterlist:this.state.characterlist.map((characterlist, sidx) => {
        if (idx !== sidx) return characterlist;
        return { ...characterlist, charactername: evt.target.value };
      })}
    )}}
    /></th></tr>
    <tr><th>角色简介：</th><th>
    <input
      type="text"
      value={characterlist.characterdescription}
      onChange={(evt)=>{this.setState({characterlist:this.state.characterlist.map((characterlist, sidx) => {
        if (idx !== sidx) return characterlist;
        return { ...characterlist, characterdescription: evt.target.value };
      })}
    )}}
    /></th></tr>
    <tr><th>性别:</th>
    <th>
    <DropDownMenu value={characterlist.charactersex} onChange={(event, index, value)=>{this.setState({characterlist:this.state.characterlist.map((characterlist, sidx) => {
      if (idx !== sidx) return characterlist;
      return { ...characterlist, charactersex: value };
    })}
  )}}>
      <MenuItem value="男"  primaryText="男" />
      <MenuItem value="女"  primaryText="女" />
    </DropDownMenu>
    </th></tr>
  </table>



  <div style={{minHeight: 400,padding: 10,margin: 'auto',marginBottom: 50,backgroundColor: '#d8d8d8'}}>
    {characterlist.characterinfo.map((characterinfo, iidx) => (
      <div style={{margin:10,marginTop:20}}>
      <div className="shortInput">
      <input
        type="text"
        placeholder="说明要素"
        value={characterinfo.type}
        disabled="disabled"
      />
      </div>
      <textarea rows="15" cols="100" name="content" value={characterinfo.content.join('\n')}  onChange={this.handlecharacterinfoContentChange(idx,iidx)}/>
      </div>
    ))}
  </div>





  <MenuItem onClick={this.handleSave}>保存</MenuItem>
  <MenuItem onClick={this.handleDelete}>删除</MenuItem>
  <MenuItem onClick={this.handleSaveExit}>保存并退出</MenuItem>
  <MenuItem onClick={this.handleExit}>退出</MenuItem>
  {this.props.auth.user.id==="5a273150c55b0d1ce0d6754d" && <MenuItem onClick={this.handlePublish}>发表</MenuItem>

(item, key, keyPath)=>{ ReactDOM.findDOMNode(this.refs[item.key]).scrollIntoView(true);window.scrollBy(0, -60);}








                  <Toolbar style={{backgroundColor: '#bcbcbc'}} >
                    <ToolbarGroup><ToolbarTitle text="人物流程剧本"/>
                    <Helper step={4} />
                    <ToolbarSeparator/></ToolbarGroup>
                  </Toolbar>
                  <div style={{minHeight: 400,padding: 10,margin: 'auto',marginBottom: 50,backgroundColor: '#d8d8d8'}}>
                    {characterlist.characterplot.map((plot, iidx) => (
                      <div style={{marginTop:20,border:"1px dashed"}}>
                      <table className="table table-striped tableText" style={{margin:10}}>
                     <tr>
                      <th style={{width:"10%"}}>
                      <h4>第{plot.plotid}阶段</h4>
                      </th>
                      <th>
                        <input
                          type="text"
                          placeholder="信息类型"
                          value={plot.plotname}
                          disabled="disabled"
                        />
                      </th>
                      <th><button type="button" style={{backgroundColor: '#4286f4'}} onClick={this.handleAddCharacterPlot(idx,iidx)} className="small">添加模块</button></th>
                      </tr>
                      </table>
                        {plot.content.map((item, iiidx) => (
                        <div style={{marginTop:20,border:"1px dashed"}}>
                          <table style={{margin:10,width:"90%"}}><tr><th style={{width:"40%"}}><input
                            type="text"
                            placeholder="信息类型"
                            value={item.type}
                            onChange={this.handleCharacterPlotTypeChange(idx,iidx,iiidx)}
                          /></th><th>
                          <button type="button" onClick={this.handleRemoveCharacterPlot(idx,iidx,iiidx)} className="small">删除此模块</button></th></tr></table>
                          <textarea rows="4" cols="100" name="content" value={item.content.join('\n')}  onChange={this.handleCharacterPlotContentChange(idx,iidx,iiidx)} style={{margin:10, width:"98%"}}/>
                      </div>
                      ))}
                      </div>
                    ))}
                  </div>

onClick={this.handleAddCharacterPlot(idx,iidx)}



handleGameImgUpload = (cat) => (evt) =>{
       evt.preventDefault()
         var filename=this.state.gameinfo.id+cat+'.'+files[0].name.split('.')[1]
         console.log(cat)
         const imageurl = 'https://chinabackend.bestlarp.com/uploadimage';
         let data = new FormData();
           data.append('image', files.item(0), filename);
           const config = {
               headers: { 'content-type': 'multipart/form-data' }
           }
           axios.post(imageurl, data, config).then(response => {
             switch (cat) {
               case 'icon':
               console.log(cat)
                 this.setState({gameinfo:{ ...this.state.gameinfo, iconurl: filename }});
                 break;
               case 'cover':
               console.log(cat)
                 this.setState({gameinfo:{ ...this.state.gameinfo, coverurl: filename }});
                 break;
               case 'map':
               console.log(cat)
                 this.setState({gameinfo:{ ...this.state.gameinfo, mapurl: filename }});
                 break;
               default:
             }
           })
           .catch(error => {
             console.log(error);
           });
        this.props.addFlashMessage({
           type: 'success',
           text: '图片上传成功!'
         });
}
onDrop= (idx,iidx) => (files) => {
  var filename=this.state.gameinfo.id+randomString({length: 2})+'.'+files[0].name.split('.')[1]
  console.log(filename)
  const imageurl = 'https://chinabackend.bestlarp.com/uploadimage';
  let data = new FormData();
    data.append('image', files[0], filename);
    const config = {
        headers: { 'content-type': 'multipart/form-data' }
    }
    axios.post(imageurl, data, config).then(response => {
    const newclueinfo = this.state.clueinfo[idx].clues.map((clue, sidx) => {
      if (iidx !== sidx) return clue;
      return { ...clue, image: filename };
    });
    const newcluelist = this.state.clueinfo.map((clueinfo, sidx) => {
      if (idx !== sidx) return clueinfo;
      return { ...clueinfo, clues: newclueinfo };
    });
    this.setState({ clueinfo: newcluelist });
    })
}

handleDelete = (evt) =>{
    const url = 'https://chinabackend.bestlarp.com/api/app';
    axios.delete(url+'/'+this.state.game_id,{
      data:{ signature: md5(this.state.game_id+"xiaomaomi") }
    }).then(response => {
      })
      .catch(error => {
        console.log(error);
      });
      var promises=[]
      for (var i=0;i<this.state.characterlist.length;i++){
        var promise = axios.delete(url+'/'+this.state.characterlist[i]._id,{
          data:{ signature: md5(this.state.characterlist[i]._id+"xiaomaomi") }
      }).then(response => {
        })
        .catch(error => {
          console.log(error);
        });
            promises.push(promise)
      }
      Promise.all(promises).then((result)=>{
        console.log("All done")
        this.props.addFlashMessage({
           type: 'failed',
           text: '游戏剧本已被删除!'
         });
         this.props.getdraft(this.props.auth.user)
         this.context.router.history.push('/draftList');
      })
}

handlePublish = (evt) =>{
    const url = 'https://chinabackend.bestlarp.com/api/app';
    axios.post(url,{
      type: "game",
      name: this.state.gameinfo.name,
      id: this.state.gameinfo.id,
      author: this.state.gameinfo.author,
      descripion: this.state.gameinfo.descripion,
      detailDescription:this.state.gameinfo.detailDescription,
      playernumber: this.state.gameinfo.playernumber,
      malenumber: this.state.characterlist.filter((char) => char.charactersex=="男").length,
      femalenumber: this.state.characterlist.filter((char) => char.charactersex=="女").length,
      category: this.state.gameinfo.category,
      characterlist: this.state.gameinfo.characterlist,
      cluelocation:this.state.clueinfo,
      mainplot:this.state.plotinfo,
      instruction:this.state.instructinfo,
      cluemethod:this.state.gameinfo.cluemethod,
      mapurl:this.state.gameinfo.mapurl,
      iconurl:this.state.gameinfo.iconurl,
      coverurl:this.state.gameinfo.coverurl,
      cluestatus:this.fillArray(this.state.clueinfo),
      signature:md5("xiaomaomi")
    }).then(response => {
      axios.delete(url+'/' +this.state.game_id,{
          data:{ signature: md5(this.state.game_id+"xiaomaomi")}
      }).then(response=>{
        this.props.getdraft(this.props.auth.user)
        this.context.router.history.push('/draftList');
        this.props.addFlashMessage({
           type: 'success',
           text: '游戏剧本已发表!'
         });
      })
      })
}



handleExit = (evt)=>{
 this.context.router.history.push('/draftList');
}
handleSaveExit = (evt) => {
  const url = 'https://chinabackend.bestlarp.com/api/app';
  axios.put(url+'/'+this.state.game_id,{
  cluelocation:this.state.gameinfo.clueinfo,
  mainplot:this.state.plotinfo,
  name:this.state.gameinfo.name,
  descripion:this.state.gameinfo.descripion,
  detailDescription:this.state.gameinfo.detailDescription,
  malenumber: this.state.characterlist.filter((char) => char.charactersex=="男").length,
  femalenumber: this.state.characterlist.filter((char) => char.charactersex=="女").length,
  category:this.state.gameinfo.category,
  instruction:this.state.instructinfo,
  cluemethod:this.state.gameinfo.cluemethod,
  mapurl:this.state.gameinfo.mapurl,
  iconurl:this.state.gameinfo.iconurl,
  coverurl:this.state.gameinfo.coverurl,
  cluestatus:this.fillArray(this.state.gameinfo.clueinfo),
  signature:md5(this.state.game_id+"xiaomaomi")
}).then(response => {
    console.log("put game submitted" + this.state.name)
  })
  .catch(error => {
    console.log(error);
  });
  var promises=[]
  for (var i=0;i<this.state.characterlist.length;i++)
      {
      var promise = axios.put(url+'/'+this.state.characterlist[i]._id,{
          gamename:this.state.gameinfo.name,
          banlocation: this.state.characterlist[i].banlocation,
          charactername: this.state.characterlist[i].charactername,
          characterdescription: this.state.characterlist[i].characterdescription,
          charactersex: this.state.characterlist[i].charactersex,
          characterinfo: this.state.characterlist[i].characterinfo,
          characterplot: this.state.characterlist[i].characterplot,
          signature:md5(this.state.characterlist[i]._id+"xiaomaomi")
      }).then(response => {
          console.log("put character submitted" + this.state.characterlist[i].name)
        })
        .catch(error => {
          console.log(error);
        });
        promises.push(promise)
      }
      Promise.all(promises).then((result)=>{
        console.log("All done")
        this.props.addFlashMessage({
           type: 'success',
           text: '游戏剧本已保存!'
         });
         this.context.router.history.push('/draftList');
      })
}


handleAddPlot =  ()  => {
    const idx=this.state.insertPlotlocation
    const newplotinfo=[{plotid:-1}].concat(this.state.plotinfo).map((plot, sidx) => {
      if (idx > sidx) {
        return this.state.plotinfo[sidx]
      }else if (idx===sidx) {
        return { plotid: idx, plotname: this.state.insertPlotname, enableclue:0, enablevote:0, content: ['']};
      }else{
        return { ...plot, plotid: plot.plotid+1 };
      }
    });
    const newcharacterlist=this.state.characterlist.map((character,sidx)=>{
      var newcharacterplot=[{plotid:-1}].concat(character.characterplot).map((plot, siidx) => {
        if (idx > siidx) {
          return character.characterplot[siidx]
        }else if (idx===siidx) {
          return { ...plot, plotid: idx, plotname: this.state.insertPlotname };
        }else{
          return { ...plot, plotid: plot.plotid+1 };
        }
      });
      return {...character,characterplot:newcharacterplot}
    })
    this.setState({ characterlist:newcharacterlist, plotinfo: newplotinfo, errorMessage:null,openDialog:false});
}

handlePlotNameChange = (idx) => (evt) => {
    const newplotinfo = this.state.gameinfo.mainplot.map((plot, sidx) => {
      if (idx !== sidx) return plot;
      return { ...plot, plotname: evt.target.value  };
    });

    this.setState({ gameinfo:{...this.state.gameinfo,mainplot: newplotinfo }});
}
